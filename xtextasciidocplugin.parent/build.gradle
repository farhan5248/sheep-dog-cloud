buildscript {
	repositories {
		mavenCentral()
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:4.0.0'
		classpath 'com.github.node-gradle:gradle-node-plugin:7.1.0'
		classpath 'net.researchgate:gradle-release:3.1.0'
	}
}

apply plugin: 'net.researchgate.release'

// Root project version - applies to all artifacts
version = '1.0.0-SNAPSHOT'

// Configuration for Xtext projects
configure(subprojects.findAll { it.name.startsWith('xtextasciidocplugin') && !it.name.contains('.vscode') }) {
	ext.xtextVersion = '2.40.0'
	ext.sheepDogTestVersion = '1.23-SNAPSHOT'
	ext.slf4jVersion = '2.0.16'
	ext.logbackVersion = '1.5.12'
	repositories {
		mavenCentral()
		maven {
			url = "https://maven.pkg.github.com/farhan5248/sheep-dog-local"
			credentials {
				username = project.findProperty("gpr.user") ?: 'farhan5248'
				password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
			}
		}
		maven {
			url = "https://repo.eclipse.org/content/groups/releases/"
		}
	}
	
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	dependencies {
		api platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
	}
	apply plugin: 'org.xtext.xtend'
	apply from: "${rootDir}/gradle/source-layout.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	
	group = 'org.farhan'
	version = rootProject.version
	
	java {
		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}
	
	configurations.all {
		exclude group: 'asm'
	}

	publishing {
		publications {
			maven(MavenPublication) {
				from components.java
				
				groupId = 'org.farhan'
				artifactId = project.name
				version = project.version
			}
		}
		repositories {
			maven {
				name = "GitHub"
				url = uri("https://maven.pkg.github.com/farhan5248/sheep-dog-local")
				credentials {
					username = project.findProperty("gpr.user") ?: 'farhan5248'
					password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
				}
			}
		}
	}
	
	// Make publish behave like Maven's deploy (install + deploy)
	publish.dependsOn publishToMavenLocal

}

// Configuration for vscode projects
configure(subprojects.findAll { it.name.contains('.vscode') }) {

	// Use root project version for consistency
	version = rootProject.version

	apply plugin: 'com.github.node-gradle.node'
	node {
		version = '20.18.2'
		npmVersion = '10.8.2'
		download = true
	}

	def inputFiles = fileTree(
		dir: projectDir, 
		excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
	)

	npmInstall {
		inputs.files(inputFiles)
		outputs.dir('out')
	}

	task packageExtension(dependsOn: [npmInstall]) {
		ext.destDir = new File(buildDir, 'vscode')
		ext.archiveName = "$project.name-${rootProject.version}.vsix"
		ext.destPath = "$destDir/$archiveName"
		outputs.dir destDir
		doFirst {
			destDir.mkdirs()
		}
		doLast {
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				exec {
					workingDir = projectDir
					commandLine 'cmd', '/c', 'node_modules\\.bin\\vsce.cmd', 'package', '--out', destPath
				}
			} else {
				exec {
					workingDir = projectDir
					commandLine 'node_modules/.bin/vsce', 'package', '--out', destPath
				}
			}
		}
	}

	task cleanVscodeOutput {
		doLast {
			delete packageExtension.destDir
			delete 'out' // output of npmInstall - don't want to delete node_modules
		}
		
	}
	
	// Hook into the main clean task
	clean.dependsOn cleanVscodeOutput

}

plugins.withType(com.github.gradle.node.NodePlugin) {
	node {
		workDir = file("$rootProject.buildDir/nodejs")
	}
}

updateVersion {
		doLast {
			// Update VSCode extension package.json with new version
			def versionPattern = /\d+.\d+(.\d+)?/
			def encoding = 'UTF-8'
			def filesToUpdate = [
				new File('xtextasciidocplugin.vscode', 'package.json'),
			]

			// String replacements - sync package.json version with project version
			filesToUpdate.forEach { file ->
				if (file.exists()) {
					String text = file.getText(encoding)
					text = text.replaceAll("\"version\": \"$versionPattern\",", "\"version\": \"$project.version\",")
					file.setText(text, encoding)
				}
			}
		}
	}

release {
    tagTemplate = 'v${version}'
	preTagCommitMessage = '[release] pre tag commit: '
    tagCommitMessage = '[release] creating tag: '
    newVersionCommitMessage = '[release] new version commit: '
    failOnSnapshotDependencies = false
}
