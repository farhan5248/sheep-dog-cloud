/*
 * generated by Xtext 2.36.0
 */
package org.farhan.dsl.asciidoc.ide;

import org.eclipse.xtext.ide.editor.quickfix.AbstractDeclarativeIdeQuickfixProvider;
import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolutionAcceptor;
import org.eclipse.xtext.ide.editor.quickfix.QuickFix;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.farhan.dsl.asciidoc.asciiDoc.TestStep;
import org.farhan.dsl.asciidoc.generator.AsciiDocGenerator;
import org.farhan.dsl.asciidoc.validation.AsciiDocValidator;

import com.google.gson.JsonArray;

/**
 * Custom quickfixes.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class AsciiDocIdeQuickfixProvider extends AbstractDeclarativeIdeQuickfixProvider {

	@QuickFix(AsciiDocValidator.INVALID_NAME)
	public void capitalizeName(DiagnosticResolutionAcceptor acceptor) {
		acceptor.accept("Capitalize name", (diagnostic, obj, document) -> {
			return createTextEdit(diagnostic,
					StringExtensions.toFirstUpper(document.getSubstring(diagnostic.getRange())));
		});
	}

	@QuickFix(AsciiDocValidator.INVALID_HEADER)
	public void capitalizeTestStepTableName(DiagnosticResolutionAcceptor acceptor) {
		acceptor.accept("Capitalize TestStep table name", (diagnostic, obj, document) -> {

			String oldHeader = ((JsonArray) diagnostic.getData()).get(0).getAsString();
			String newHeader = StringExtensions.toFirstUpper(oldHeader);
			String oldRow = document.getSubstring(diagnostic.getRange());
			String newRow = oldRow.replace(oldHeader, newHeader);
			return createTextEdit(diagnostic, newRow);
		});
	}

	@QuickFix(AsciiDocValidator.MISSING_STEP_DEF)
	public void createDefinition(DiagnosticResolutionAcceptor acceptor) {
		acceptor.accept("Create TestStep definition", (diagnostic, obj, document) -> {
			TestStep testStep = (TestStep) obj;
			AsciiDocGenerator.doGenerate(testStep);
			return createTextEdit(diagnostic, testStep.getName()); // No text change needed, files are generated externally
		});
	}
}
