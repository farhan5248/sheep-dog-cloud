/**
 * generated by Xtext 2.40.0
 */
package org.farhan.dsl.asciidoc.asciiDoc.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.farhan.dsl.asciidoc.asciiDoc.AsciiDocPackage;
import org.farhan.dsl.asciidoc.asciiDoc.Statement;
import org.farhan.dsl.asciidoc.asciiDoc.TestStep;
import org.farhan.dsl.asciidoc.asciiDoc.TestStepContainer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Step Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.farhan.dsl.asciidoc.asciiDoc.impl.TestStepContainerImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.farhan.dsl.asciidoc.asciiDoc.impl.TestStepContainerImpl#getStatementList <em>Statement List</em>}</li>
 *   <li>{@link org.farhan.dsl.asciidoc.asciiDoc.impl.TestStepContainerImpl#getTestStepList <em>Test Step List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestStepContainerImpl extends MinimalEObjectImpl.Container implements TestStepContainer
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatementList() <em>Statement List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementList()
   * @generated
   * @ordered
   */
  protected EList<Statement> statementList;

  /**
   * The cached value of the '{@link #getTestStepList() <em>Test Step List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestStepList()
   * @generated
   * @ordered
   */
  protected EList<TestStep> testStepList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestStepContainerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsciiDocPackage.Literals.TEST_STEP_CONTAINER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsciiDocPackage.TEST_STEP_CONTAINER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStatementList()
  {
    if (statementList == null)
    {
      statementList = new EObjectContainmentEList<Statement>(Statement.class, this, AsciiDocPackage.TEST_STEP_CONTAINER__STATEMENT_LIST);
    }
    return statementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestStep> getTestStepList()
  {
    if (testStepList == null)
    {
      testStepList = new EObjectContainmentEList<TestStep>(TestStep.class, this, AsciiDocPackage.TEST_STEP_CONTAINER__TEST_STEP_LIST);
    }
    return testStepList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsciiDocPackage.TEST_STEP_CONTAINER__STATEMENT_LIST:
        return ((InternalEList<?>)getStatementList()).basicRemove(otherEnd, msgs);
      case AsciiDocPackage.TEST_STEP_CONTAINER__TEST_STEP_LIST:
        return ((InternalEList<?>)getTestStepList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsciiDocPackage.TEST_STEP_CONTAINER__NAME:
        return getName();
      case AsciiDocPackage.TEST_STEP_CONTAINER__STATEMENT_LIST:
        return getStatementList();
      case AsciiDocPackage.TEST_STEP_CONTAINER__TEST_STEP_LIST:
        return getTestStepList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsciiDocPackage.TEST_STEP_CONTAINER__NAME:
        setName((String)newValue);
        return;
      case AsciiDocPackage.TEST_STEP_CONTAINER__STATEMENT_LIST:
        getStatementList().clear();
        getStatementList().addAll((Collection<? extends Statement>)newValue);
        return;
      case AsciiDocPackage.TEST_STEP_CONTAINER__TEST_STEP_LIST:
        getTestStepList().clear();
        getTestStepList().addAll((Collection<? extends TestStep>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsciiDocPackage.TEST_STEP_CONTAINER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsciiDocPackage.TEST_STEP_CONTAINER__STATEMENT_LIST:
        getStatementList().clear();
        return;
      case AsciiDocPackage.TEST_STEP_CONTAINER__TEST_STEP_LIST:
        getTestStepList().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsciiDocPackage.TEST_STEP_CONTAINER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsciiDocPackage.TEST_STEP_CONTAINER__STATEMENT_LIST:
        return statementList != null && !statementList.isEmpty();
      case AsciiDocPackage.TEST_STEP_CONTAINER__TEST_STEP_LIST:
        return testStepList != null && !testStepList.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TestStepContainerImpl
